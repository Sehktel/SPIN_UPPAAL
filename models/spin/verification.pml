/*
 * Дополнительная модель для верификации системы светофора
 * 
 * Эта модель добавляет:
 * - Более сложные свойства безопасности
 * - Тесты на race conditions
 * - Проверку корректности протокола
 * - Дополнительные сценарии ошибок
 */

/* Включение основной модели */
#include "traffic_light.pml"

/* Дополнительные глобальные переменные для тестирования */
int test_scenario = 0;           // Номер тестового сценария
bool test_completed = false;     // Флаг завершения теста
int error_count = 0;            // Счетчик обнаруженных ошибок

/* Процесс тестирования - выполняет различные сценарии */
proctype TestScenario() {
    printf("=== ЗАПУСК ТЕСТОВЫХ СЦЕНАРИЕВ ===\n");
    
    /* Сценарий 1: Проверка корректности переключения светофора */
    printf("Тест 1: Проверка корректности переключения светофора\n");
    test_scenario = 1;
    
    /* Ждем завершения цикла светофора */
    do
    :: light_change?0 ->  // Получили красный свет
        printf("Тест 1: Получен красный свет - OK\n");
        break;
    :: timeout ->
        printf("Тест 1: ТАЙМАУТ - светофор не переключился\n");
        error_count++;
        break;
    od;
    
    /* Сценарий 2: Проверка приоритета пешеходов */
    printf("Тест 2: Проверка приоритета пешеходов\n");
    test_scenario = 2;
    
    /* Активируем пешехода */
    pedestrian_waiting = true;
    printf("Тест 2: Пешеход активирован\n");
    
    /* Ждем зеленого света */
    do
    :: light_change?2 ->  // Получили зеленый свет
        printf("Тест 2: Получен зеленый свет для пешехода - OK\n");
        break;
    :: timeout ->
        printf("Тест 2: ТАЙМАУТ - пешеход не получил приоритет\n");
        error_count++;
        break;
    od;
    
    /* Сценарий 3: Проверка экстренного режима */
    printf("Тест 3: Проверка экстренного режима\n");
    test_scenario = 3;
    
    /* Активируем экстренный режим */
    emergency_mode = true;
    printf("Тест 3: Экстренный режим активирован\n");
    
    /* Ждем красного света */
    do
    :: light_change?0 ->  // Получили красный свет
        printf("Тест 3: Получен красный свет в экстренном режиме - OK\n");
        break;
    :: timeout ->
        printf("Тест 3: ТАЙМАУТ - экстренный режим не сработал\n");
        error_count++;
        break;
    od;
    
    /* Сценарий 4: Проверка на race conditions */
    printf("Тест 4: Проверка на race conditions\n");
    test_scenario = 4;
    
    /* Одновременно активируем несколько пешеходов */
    run Pedestrian();
    run Pedestrian();
    run Pedestrian();
    
    printf("Тест 4: Запущено несколько пешеходов одновременно\n");
    
    /* Ждем завершения теста */
    do
    :: timeout ->
        printf("Тест 4: Проверка race conditions завершена\n");
        break;
    od;
    
    /* Сценарий 5: Проверка на deadlock */
    printf("Тест 5: Проверка на deadlock\n");
    test_scenario = 5;
    
    /* Создаем потенциально проблемную ситуацию */
    cars_waiting = 10;  // Много машин
    pedestrian_waiting = true;  // И пешеход
    
    printf("Тест 5: Создана потенциально проблемная ситуация\n");
    
    /* Ждем разрешения ситуации */
    do
    :: timeout ->
        printf("Тест 5: Проверка deadlock завершена\n");
        break;
    od;
    
    printf("=== ВСЕ ТЕСТЫ ЗАВЕРШЕНЫ ===\n");
    printf("Обнаружено ошибок: %d\n", error_count);
    test_completed = true;
}

/* Дополнительные свойства для верификации */
ltl test_safety_1 {
    /* Безопасность: светофор не может быть одновременно в нескольких состояниях */
    !(pedestrian_waiting && emergency_mode)
}

ltl test_safety_2 {
    /* Безопасность: количество ожидающих автомобилей не может быть отрицательным */
    cars_waiting >= 0
}

ltl test_liveness_1 {
    /* Живость: если есть ожидающие, то светофор должен отреагировать */
    [] (pedestrian_waiting -> <> light_change!2)
}

ltl test_liveness_2 {
    /* Живость: экстренный режим должен быть обработан */
    [] (emergency_mode -> <> !emergency_mode)
}

ltl test_fairness {
    /* Справедливость: пешеходы и автомобили должны получать доступ */
    [] (pedestrian_waiting -> <> !pedestrian_waiting) &&
    [] (cars_waiting > 0 -> <> cars_waiting == 0)
}

/* Спецификация для проверки корректности протокола */
ltl protocol_correctness {
    /* Протокол корректен, если:
       1. Красный свет всегда предшествует зеленому
       2. Желтый свет всегда между красным и зеленым
       3. Зеленый свет не может длиться бесконечно
    */
    [] (light_change!0 -> <> light_change!1) &&
    [] (light_change!1 -> <> light_change!2) &&
    [] (light_change!2 -> <> light_change!0)
}

/* Спецификация для проверки отсутствия starvation */
ltl no_starvation {
    /* Ни один процесс не должен "голодать" бесконечно */
    [] (pedestrian_waiting -> <> !pedestrian_waiting) &&
    [] (cars_waiting > 0 -> <> cars_waiting == 0) &&
    [] (emergency_mode -> <> !emergency_mode)
}

/* Модифицированная инициализация с добавлением тестов */
init {
    printf("=== ИНИЦИАЛИЗАЦИЯ СИСТЕМЫ С ТЕСТАМИ ===\n");
    
    /* Запуск основных процессов */
    run TrafficLight();
    run Pedestrian();
    run Car();
    run EmergencyService();
    run SystemMonitor();
    
    /* Запуск тестового процесса */
    run TestScenario();
    
    printf("=== СИСТЕМА С ТЕСТАМИ ЗАПУЩЕНА ===\n");
}

/* Дополнительные проверки во время выполнения */
never {
    /* Никогда не должно быть одновременно зеленого и красного света */
    (pedestrian_waiting && cars_waiting > 0)
}

never {
    /* Никогда не должно быть отрицательного количества автомобилей */
    (cars_waiting < 0)
}

never {
    /* Никогда не должно быть бесконечного ожидания */
    (pedestrian_waiting && cars_waiting == 0)
}
