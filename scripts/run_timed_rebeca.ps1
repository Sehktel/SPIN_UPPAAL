# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Timed Rebeca
# –ó–∞–ø—É—Å–∫ –∞–∫—Ç–æ—Ä-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
# –ê–≤—Ç–æ—Ä: Senior Developer
# –î–∞—Ç–∞: 2024-12-19

param(
    [string]$ModelPath = "models/timed_rebeca/distributed_control_system.rebeca",
    [string]$OutputPath = "results/timed_rebeca_output.txt",
    [int]$Timeout = 30000,  # 30 —Å–µ–∫—É–Ω–¥
    [switch]$Verbose
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Info = "Cyan"
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Header = "Magenta"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    
    if ($Verbose) {
        Write-Host $Message -ForegroundColor $Colors[$Color]
    } else {
        Write-Host $Message
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
function Write-Header {
    param([string]$Title)
    
    Write-ColorOutput "`n" -Color Header
    Write-ColorOutput "=" * $Title.Length -Color Header
    Write-ColorOutput $Title -Color Header
    Write-ColorOutput "=" * $Title.Length -Color Header
    Write-ColorOutput "" -Color Header
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function Test-Dependencies {
    Write-Header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Java
    try {
        $javaVersion = java -version 2>&1 | Select-String "version"
        if ($javaVersion) {
            Write-ColorOutput "‚úÖ Java –Ω–∞–π–¥–µ–Ω: $javaVersion" -Color Success
        } else {
            Write-ColorOutput "‚ùå Java –Ω–µ –Ω–∞–π–¥–µ–Ω" -Color Error
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå Java –Ω–µ –Ω–∞–π–¥–µ–Ω" -Color Error
        return $false
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Timed Rebeca
    $rebecaPath = Get-Command "rebeca" -ErrorAction SilentlyContinue
    if ($rebecaPath) {
        Write-ColorOutput "‚úÖ Timed Rebeca –Ω–∞–π–¥–µ–Ω: $($rebecaPath.Source)" -Color Success
    } else {
        Write-ColorOutput "‚ö†Ô∏è Timed Rebeca –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH" -Color Warning
        Write-ColorOutput "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Timed Rebeca –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH" -Color Warning
    }
    
    return $true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –º–æ–¥–µ–ª–∏
function Compile-Model {
    param([string]$ModelPath)
    
    Write-Header "–ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏"
    
    if (-not (Test-Path $ModelPath)) {
        Write-ColorOutput "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $ModelPath" -Color Error
        return $false
    }
    
    Write-ColorOutput "üìÅ –ú–æ–¥–µ–ª—å: $ModelPath" -Color Info
    
    try {
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $outputDir = Split-Path $OutputPath -Parent
        if (-not (Test-Path $outputDir)) {
            New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
        }
        
        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Java (–µ—Å–ª–∏ Timed Rebeca –Ω–µ –Ω–∞–π–¥–µ–Ω)
        if (-not (Get-Command "rebeca" -ErrorAction SilentlyContinue)) {
            Write-ColorOutput "üîß –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Java..." -Color Info
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Java —Ñ–∞–π–ª–∞
            $javaFile = $ModelPath -replace '\.rebeca$', '.java'
            Copy-Item $ModelPath $javaFile
            
            # –ö–æ–º–ø–∏–ª—è—Ü–∏—è Java
            javac $javaFile
            if ($LASTEXITCODE -eq 0) {
                Write-ColorOutput "‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞" -Color Success
                return $true
            } else {
                Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏" -Color Error
                return $false
            }
        } else {
            # –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Timed Rebeca
            Write-ColorOutput "üîß –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Timed Rebeca..." -Color Info
            
            $compileResult = rebeca -c $ModelPath 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-ColorOutput "‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞" -Color Success
                return $true
            } else {
                Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: $compileResult" -Color Error
                return $false
            }
        }
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: $($_.Exception.Message)" -Color Error
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–∏
function Run-Model {
    param([string]$ModelPath)
    
    Write-Header "–ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏"
    
    try {
        if (Get-Command "rebeca" -ErrorAction SilentlyContinue) {
            # –ó–∞–ø—É—Å–∫ —Å –ø–æ–º–æ—â—å—é Timed Rebeca
            Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫ —Å –ø–æ–º–æ—â—å—é Timed Rebeca..." -Color Info
            
            $runResult = rebeca -r $ModelPath 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-ColorOutput "‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" -Color Success
                $runResult | Out-File -FilePath $OutputPath -Encoding UTF8
                Write-ColorOutput "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $OutputPath" -Color Success
                return $true
            } else {
                Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $runResult" -Color Error
                return $false
            }
        } else {
            # –ó–∞–ø—É—Å–∫ —Å –ø–æ–º–æ—â—å—é Java
            Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫ —Å –ø–æ–º–æ—â—å—é Java..." -Color Info
            
            $javaFile = $ModelPath -replace '\.rebeca$', '.java'
            $className = (Get-Item $javaFile).BaseName
            
            # –ó–∞–ø—É—Å–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            $job = Start-Job -ScriptBlock {
                param($ClassName)
                java $ClassName
            } -ArgumentList $className
            
            if (Wait-Job $job -Timeout ($Timeout / 1000)) {
                $result = Receive-Job $job
                Remove-Job $job
                
                if ($LASTEXITCODE -eq 0) {
                    Write-ColorOutput "‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" -Color Success
                    $result | Out-File -FilePath $OutputPath -Encoding UTF8
                    Write-ColorOutput "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $OutputPath" -Color Success
                    return $true
                } else {
                    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" -Color Error
                    return $false
                }
            } else {
                Stop-Job $job
                Remove-Job $job
                Write-ColorOutput "‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ($($Timeout)ms)" -Color Error
                return $false
            }
        }
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $($_.Exception.Message)" -Color Error
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function Analyze-Results {
    param([string]$OutputPath)
    
    Write-Header "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    
    if (-not (Test-Path $OutputPath)) {
        Write-ColorOutput "‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" -Color Error
        return
    }
    
    try {
        $content = Get-Content $OutputPath -Encoding UTF8
        
        # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
        $logLines = $content | Where-Object { $_ -match '\[.*\]' }
        $errorLines = $content | Where-Object { $_ -match 'ERROR|–û–®–ò–ë–ö–ê|FAILED|–ö–†–ò–¢–ò–ß–ù–û' }
        $warningLines = $content | Where-Object { $_ -match 'WARNING|–í–ù–ò–ú–ê–ù–ò–ï|WARN' }
        
        Write-ColorOutput "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:" -Color Info
        Write-ColorOutput "   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: $($content.Count)" -Color Info
        Write-ColorOutput "   –õ–æ–≥–æ–≤: $($logLines.Count)" -Color Info
        Write-ColorOutput "   –û—à–∏–±–æ–∫: $($errorLines.Count)" -Color Info
        Write-ColorOutput "   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $($warningLines.Count)" -Color Info
        
        if ($errorLines.Count -gt 0) {
            Write-ColorOutput "`n‚ùå –û—à–∏–±–∫–∏:" -Color Error
            $errorLines | ForEach-Object { Write-ColorOutput "   $_" -Color Error }
        }
        
        if ($warningLines.Count -gt 0) {
            Write-ColorOutput "`n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:" -Color Warning
            $warningLines | ForEach-Object { Write-ColorOutput "   $_" -Color Warning }
        }
        
        # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        $timeMetrics = $content | Where-Object { $_ -match '\d+ms|\d+ms\)' }
        if ($timeMetrics.Count -gt 0) {
            Write-ColorOutput "`n‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:" -Color Info
            $timeMetrics | ForEach-Object { Write-ColorOutput "   $_" -Color Info }
        }
        
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $($_.Exception.Message)" -Color Error
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function Cleanup-TempFiles {
    Write-Header "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    
    try {
        $tempFiles = @(
            ($ModelPath -replace '\.rebeca$', '.java'),
            ($ModelPath -replace '\.rebeca$', '.class')
        )
        
        foreach ($file in $tempFiles) {
            if (Test-Path $file) {
                Remove-Item $file -Force
                Write-ColorOutput "üóëÔ∏è –£–¥–∞–ª–µ–Ω: $file" -Color Info
            }
        }
        
        Write-ColorOutput "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" -Color Success
    } catch {
        Write-ColorOutput "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: $($_.Exception.Message)" -Color Warning
    }
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Header "Timed Rebeca - –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏"
    Write-ColorOutput "üéØ –¶–µ–ª—å: –ó–∞–ø—É—Å–∫ –∞–∫—Ç–æ—Ä-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏" -Color Info
    Write-ColorOutput "üìÅ –ú–æ–¥–µ–ª—å: $ModelPath" -Color Info
    Write-ColorOutput "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: $($Timeout)ms" -Color Info
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if (-not (Test-Dependencies)) {
        Write-ColorOutput "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" -Color Error
        exit 1
    }
    
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏
    if (-not (Compile-Model $ModelPath)) {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –º–æ–¥–µ–ª–∏" -Color Error
        exit 1
    }
    
    # –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏
    if (-not (Run-Model $ModelPath)) {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏" -Color Error
        exit 1
    }
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    Analyze-Results $OutputPath
    
    # –û—á–∏—Å—Ç–∫–∞
    Cleanup-TempFiles
    
    Write-Header "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
    Write-ColorOutput "üéâ –ú–æ–¥–µ–ª—å Timed Rebeca —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!" -Color Success
    Write-ColorOutput "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $OutputPath" -Color Success
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
try {
    Main
} catch {
    Write-ColorOutput "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $($_.Exception.Message)" -Color Error
    exit 1
}
