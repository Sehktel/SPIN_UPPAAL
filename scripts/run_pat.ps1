#!/usr/bin/env pwsh
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ PAT (Process Algebra Tool)
# PAT –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ CSP (Communicating Sequential Processes) –∏ –ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π –∞–ª–≥–µ–±—Ä–µ

param(
    [Parameter(Mandatory=$false)]
    [string]$ModelFile = "models/pat/traffic_light.csp",
    
    [Parameter(Mandatory=$false)]
    [switch]$Help,
    
    [Parameter(Mandatory=$false)]
    [switch]$Verbose,
    
    [Parameter(Mandatory=$false)]
    [string]$OutputFile = "",
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("refinement", "deadlock", "divergence", "assertion")]
    [string]$CheckType = "refinement"
)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
function Show-Help {
    Write-Host @"
PAT Runner Script
=================

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    .\run_pat.ps1 [-ModelFile <–ø—É—Ç—å>] [-Help] [-Verbose] [-OutputFile <–ø—É—Ç—å>] [-CheckType <—Ç–∏–ø>]

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -ModelFile     –ü—É—Ç—å –∫ CSP —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: models/pat/traffic_light.csp)
    -Help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    -Verbose       –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    -OutputFile    –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    -CheckType     –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: refinement, deadlock, divergence, assertion (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: refinement)

–ü—Ä–∏–º–µ—Ä—ã:
    .\run_pat.ps1
    .\run_pat.ps1 -ModelFile "models/pat/communication_protocol.csp"
    .\run_pat.ps1 -Verbose -CheckType "deadlock" -OutputFile "results/pat_output.txt"

PAT –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ü—Ä–æ—Ü–µ—Å—Å–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ CSP (Communicating Sequential Processes)
    - –ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å–≤—è–∑–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫
"@
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PAT
function Test-PAT {
    try {
        $version = pat -version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úì PAT –Ω–∞–π–¥–µ–Ω: $version" -ForegroundColor Green
            return $true
        }
    }
    catch {
        try {
            $version = pat.exe -version 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úì PAT –Ω–∞–π–¥–µ–Ω (pat.exe): $version" -ForegroundColor Green
                return $true
            }
        }
        catch {
            Write-Host "‚úó PAT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH" -ForegroundColor Red
            Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PAT:" -ForegroundColor Yellow
            Write-Host "  –°–∫–∞—á–∞–π—Ç–µ —Å: http://pat.comp.nus.edu.sg/" -ForegroundColor Cyan
            Write-Host "  –î–æ–±–∞–≤—å—Ç–µ –≤ PATH: C:\pat\bin" -ForegroundColor Cyan
            return $false
        }
    }
    return $false
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
function Test-ModelFile {
    param([string]$file)
    
    if (-not (Test-Path $file)) {
        Write-Host "‚úó –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $file" -ForegroundColor Red
        Write-Host "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:" -ForegroundColor Yellow
        Get-ChildItem "models/pat/" -Filter "*.csp" | ForEach-Object {
            Write-Host "  - $($_.Name)" -ForegroundColor Cyan
        }
        return $false
    }
    
    Write-Host "‚úì –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω: $file" -ForegroundColor Green
    return $true
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ PAT –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
function Get-PATArguments {
    param([string]$checkType)
    
    switch ($checkType) {
        "refinement" { 
            return @("-refinement", "-depth", "10")
        }
        "deadlock" { 
            return @("-deadlock", "-depth", "10")
        }
        "divergence" { 
            return @("-divergence", "-depth", "10")
        }
        "assertion" { 
            return @("-assertion", "-depth", "10")
        }
        default { 
            return @("-refinement", "-depth", "10")
        }
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
function Invoke-PATVerification {
    param(
        [string]$modelFile,
        [string]$checkType,
        [string]$outputFile = ""
    )
    
    Write-Host "`nüöÄ –ó–∞–ø—É—Å–∫ PAT –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏..." -ForegroundColor Magenta
    Write-Host "–ú–æ–¥–µ–ª—å: $modelFile" -ForegroundColor Cyan
    Write-Host "–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: $checkType" -ForegroundColor Cyan
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    $command = "pat"
    $args = Get-PATArguments -checkType $checkType
    $args += $modelFile
    
    if ($Verbose) {
        Write-Host "–ö–æ–º–∞–Ω–¥–∞: $command $($args -join ' ')" -ForegroundColor Gray
    }
    
    # –ó–∞–ø—É—Å–∫ PAT
    try {
        if ($outputFile -and $outputFile -ne "") {
            Write-Host "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $outputFile" -ForegroundColor Yellow
            & $command @args | Tee-Object -FilePath $outputFile
        } else {
            & $command @args
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "`n‚úÖ PAT –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
        } else {
            Write-Host "`n‚ö†Ô∏è PAT –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: $LASTEXITCODE" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "`n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PAT: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function Analyze-PATResults {
    param([string]$outputFile)
    
    if (-not (Test-Path $outputFile)) {
        Write-Host "–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞" -ForegroundColor Yellow
        return
    }
    
    Write-Host "`nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ PAT..." -ForegroundColor Magenta
    
    $content = Get-Content $outputFile -Raw
    
    # –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if ($content -match "refinement.*false") {
        Write-Host "‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è —É—Ç–æ—á–Ω–µ–Ω–∏—è!" -ForegroundColor Red
    } elseif ($content -match "refinement.*true") {
        Write-Host "‚úÖ –£—Ç–æ—á–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è" -ForegroundColor Green
    }
    
    # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
    if ($content -match "states.*: (\d+)") {
        $states = $matches[1]
        Write-Host "üìà –°–æ—Å—Ç–æ—è–Ω–∏–π: $states" -ForegroundColor Cyan
    }
    
    # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if ($content -match "time.*: ([\d.]+)") {
        $time = $matches[1]
        Write-Host "‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $time —Å–µ–∫" -ForegroundColor Cyan
    }
    
    # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
    if ($content -match "processes.*: (\d+)") {
        $processes = $matches[1]
        Write-Host "üîÑ –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: $processes" -ForegroundColor Cyan
    }
}

# –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
function Main {
    if ($Help) {
        Show-Help
        return
    }
    
    Write-Host "üîç PAT Process Algebra Tool" -ForegroundColor Blue
    Write-Host "============================" -ForegroundColor Blue
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PAT
    if (-not (Test-PAT)) {
        return
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
    if (-not (Test-ModelFile $ModelFile)) {
        return
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if ($OutputFile -and $OutputFile -ne "") {
        $outputDir = Split-Path $OutputFile -Parent
        if ($outputDir -and -not (Test-Path $outputDir)) {
            New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
        }
    }
    
    # –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    Invoke-PATVerification -modelFile $ModelFile -checkType $CheckType -outputFile $OutputFile
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if ($OutputFile -and $OutputFile -ne "") {
        Analyze-PATResults -outputFile $OutputFile
    }
    
    Write-Host "`n‚ú® –ì–æ—Ç–æ–≤–æ!" -ForegroundColor Green
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
Main


