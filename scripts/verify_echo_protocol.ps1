#!/usr/bin/env pwsh
<#
.SYNOPSIS
    –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ "–≠—Ö–æ-—Å–µ—Ä–≤–µ—Ä" —Å –ø–æ–º–æ—â—å—é SPIN
    
.DESCRIPTION
    –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–≤—è–∑–∏:
    1. –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å Promela –≤ C
    2. –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç C –∫–æ–¥ –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
    3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
.PARAMETER ModelPath
    –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏ Promela (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ../models/spin/echo_protocol.pml)
    
.PARAMETER OutputDir
    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ../results/echo_protocol)
    
.EXAMPLE
    .\verify_echo_protocol.ps1
    .\verify_echo_protocol.ps1 -ModelPath "my_protocol.pml"
#>

param(
    [string]$ModelPath = "../models/spin/echo_protocol.pml",
    [string]$OutputDir = "../results/echo_protocol"
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Info = "Cyan"
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
}

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Colors[$Color]
}

function Test-SPIN {
    try {
        $spinVersion = spin -V 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ SPIN –Ω–∞–π–¥–µ–Ω: $spinVersion" "Success"
            return $true
        }
    }
    catch {
        Write-ColorOutput "‚ùå SPIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH" "Error"
        return $false
    }
    return $false
}

function Test-GCC {
    try {
        $gccVersion = gcc --version 2>&1 | Select-Object -First 1
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ GCC –Ω–∞–π–¥–µ–Ω: $gccVersion" "Success"
            return $true
        }
    }
    catch {
        Write-ColorOutput "‚ùå GCC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH" "Error"
        return $false
    }
    return $false
}

function Verify-Protocol {
    param([string]$ModelPath, [string]$OutputDir)
    
    Write-ColorOutput "üîç –ù–∞—á–∏–Ω–∞—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞..." "Info"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (!(Test-Path $OutputDir)) {
        New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
        Write-ColorOutput "üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $OutputDir" "Info"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    $modelName = [System.IO.Path]::GetFileNameWithoutExtension($ModelPath)
    $cFile = Join-Path $OutputDir "$modelName.c"
    $exeFile = Join-Path $OutputDir "$modelName.exe"
    
    Write-ColorOutput "üìù –ö–æ–º–ø–∏–ª–∏—Ä—É—é Promela –≤ C..." "Info"
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º Promela –≤ C
    try {
        spin -a $ModelPath
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ Promela –≤ C"
        }
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π C —Ñ–∞–π–ª
        if (Test-Path "pan.c") {
            Move-Item "pan.c" $cFile -Force
        }
        if (Test-Path "pan.h") {
            Move-Item "pan.h" (Join-Path $OutputDir "pan.h") -Force
        }
        
        Write-ColorOutput "‚úÖ Promela —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω –≤ C" "Success"
    }
    catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ Promela: $_" "Error"
        return $false
    }
    
    Write-ColorOutput "üî® –ö–æ–º–ø–∏–ª–∏—Ä—É—é C –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª..." "Info"
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º C –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
    try {
        gcc -o $exeFile $cFile -O2
        if ($LASTEXITCODE -ne 0) {
            throw "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ C"
        }
        
        Write-ColorOutput "‚úÖ C —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª" "Success"
    }
    catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ C: $_" "Error"
        return $false
    }
    
    Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é..." "Info"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    try {
        $verificationResult = & $exeFile 2>&1
        $exitCode = $LASTEXITCODE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        $resultFile = Join-Path $OutputDir "verification_result.txt"
        $verificationResult | Out-File -FilePath $resultFile -Encoding UTF8
        
        if ($exitCode -eq 0) {
            Write-ColorOutput "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" "Success"
            Write-ColorOutput "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $resultFile" "Info"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            $results = Get-Content $resultFile
            Write-ColorOutput "üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:" "Info"
            
            foreach ($line in $results) {
                if ($line -match "errors: (\d+)") {
                    $errors = $matches[1]
                    if ([int]$errors -eq 0) {
                        Write-ColorOutput "   ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" "Success"
                    } else {
                        Write-ColorOutput "   ‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: $errors" "Warning"
                    }
                }
                if ($line -match "states: (\d+)") {
                    $states = $matches[1]
                    Write-ColorOutput "   üìä –°–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: $states" "Info"
                }
            }
        } else {
            Write-ColorOutput "‚ö†Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º: $exitCode" "Warning"
            Write-ColorOutput "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $resultFile" "Info"
        }
    }
    catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: $_" "Error"
        return $false
    }
    
    return $true
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
function Main {
    Write-ColorOutput "üöÄ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ '–≠—Ö–æ-—Å–µ—Ä–≤–µ—Ä' —Å –ø–æ–º–æ—â—å—é SPIN" "Info"
    Write-ColorOutput "=" * 60 "Info"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..." "Info"
    
    if (!(Test-SPIN)) {
        Write-ColorOutput "‚ùå SPIN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SPIN –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH" "Error"
        Write-ColorOutput "üí° –°–∫–∞—á–∞—Ç—å –º–æ–∂–Ω–æ —Å: http://spinroot.com/" "Info"
        return 1
    }
    
    if (!(Test-GCC)) {
        Write-ColorOutput "‚ùå GCC –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MinGW –∏–ª–∏ –¥—Ä—É–≥–æ–π C –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä" "Error"
        return 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if (!(Test-Path $ModelPath)) {
        Write-ColorOutput "‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $ModelPath" "Error"
        return 1
    }
    
    Write-ColorOutput "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã" "Success"
    Write-ColorOutput ""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    $success = Verify-Protocol -ModelPath $ModelPath -OutputDir $OutputDir
    
    if ($success) {
        Write-ColorOutput ""
        Write-ColorOutput "üéâ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" "Success"
        Write-ColorOutput "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $OutputDir" "Info"
    } else {
        Write-ColorOutput ""
        Write-ColorOutput "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏" "Error"
        return 1
    }
    
    return 0
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
exit (Main)
