#!/usr/bin/env pwsh
<#
.SYNOPSIS
    –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ EtherCAT –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ SPIN
    
.DESCRIPTION
    –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ EtherCAT –º–æ–¥–µ–ª–∏:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (SPIN, GCC)
    2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç C –∫–æ–¥ –∏–∑ Promela
    3. –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç
    
.PARAMETER ModelPath
    –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏ EtherCAT (.pml)
    
.PARAMETER OutputDir
    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
.EXAMPLE
    .\verify_ethercat.ps1 -ModelPath "models/spin/ethercat.pml"
    
.NOTES
    –ê–≤—Ç–æ—Ä: AI Assistant
    –î–∞—Ç–∞: 2024-12-19
    –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
#>

param(
    [string]$ModelPath = "models/spin/ethercat.pml",
    [string]$OutputDir = "results/ethercat_verification"
)

# –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function Test-Dependencies {
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." "Cyan"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SPIN
    try {
        $spinVersion = spin -V 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ SPIN –Ω–∞–π–¥–µ–Ω: $spinVersion" "Green"
        } else {
            Write-ColorOutput "‚ùå SPIN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå SPIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ" "Red"
        Write-ColorOutput "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SPIN Model Checker" "Yellow"
        return $false
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GCC
    try {
        $gccVersion = gcc --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ GCC –Ω–∞–π–¥–µ–Ω: $($gccVersion[0])" "Green"
        } else {
            Write-ColorOutput "‚ùå GCC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå GCC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ" "Red"
        Write-ColorOutput "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MinGW –∏–ª–∏ MSYS2" "Yellow"
        return $false
    }
    
    return $true
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
function Test-ModelFile {
    param([string]$Path)
    
    if (-not (Test-Path $Path)) {
        Write-ColorOutput "‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $Path" "Red"
        return $false
    }
    
    $content = Get-Content $Path -Raw
    if ($content -match "proctype.*EtherCATMaster") {
        Write-ColorOutput "‚úÖ –ú–æ–¥–µ–ª—å EtherCAT –Ω–∞–π–¥–µ–Ω–∞" "Green"
        return $true
    } else {
        Write-ColorOutput "‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥–µ–ª—å EtherCAT" "Red"
        return $false
    }
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è C –∫–æ–¥–∞ –∏–∑ Promela
function Generate-Code {
    param([string]$ModelPath, [string]$OutputDir)
    
    Write-ColorOutput "üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è C –∫–æ–¥–∞ –∏–∑ Promela..." "Cyan"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (-not (Test-Path $OutputDir)) {
        New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
    }
    
    $modelName = [System.IO.Path]::GetFileNameWithoutExtension($ModelPath)
    $cFile = Join-Path $OutputDir "$modelName.c"
    
    try {
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º C –∫–æ–¥
        spin -a $ModelPath
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ C –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: pan.c" "Green"
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            if (Test-Path "pan.c") {
                Move-Item "pan.c" $cFile -Force
                Write-ColorOutput "‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: $cFile" "Green"
            }
        } else {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ C –∫–æ–¥–∞" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ C –∫–æ–¥–∞: $_" "Red"
        return $false
    }
    
    return $true
}

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è C –∫–æ–¥–∞
function Compile-Code {
    param([string]$CFilePath, [string]$OutputDir)
    
    Write-ColorOutput "üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è C –∫–æ–¥–∞..." "Cyan"
    
    $modelName = [System.IO.Path]::GetFileNameWithoutExtension($CFilePath)
    $exeFile = Join-Path $OutputDir "$modelName.exe"
    
    try {
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        gcc -O2 -o $exeFile $CFilePath -DNFAIR=3
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ –ö–æ–¥ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω: $exeFile" "Green"
            return $true
        } else {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: $_" "Red"
        return $false
    }
}

# –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
function Run-Verification {
    param([string]$ExePath, [string]$OutputDir)
    
    Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏..." "Cyan"
    
    $modelName = [System.IO.Path]::GetFileNameWithoutExtension($ExePath)
    $logFile = Join-Path $OutputDir "$modelName.log"
    $reportFile = Join-Path $OutputDir "$modelName.report.txt"
    
    try {
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        & $ExePath -a -n -N -m -w 2>&1 | Tee-Object -FilePath $logFile
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" "Green"
        } else {
            Write-ColorOutput "‚ö†Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏" "Yellow"
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        Analyze-Results $logFile $reportFile
        
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: $_" "Red"
        return $false
    }
    
    return $true
}

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
function Analyze-Results {
    param([string]$LogFile, [string]$ReportFile)
    
    Write-ColorOutput "üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏..." "Cyan"
    
    if (-not (Test-Path $LogFile)) {
        Write-ColorOutput "‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" "Red"
        return
    }
    
    $logContent = Get-Content $LogFile -Raw
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    $report = @"
=== –û–¢–ß–ï–¢ –ü–û –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ETHERCAT ===
–î–∞—Ç–∞: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
–ú–æ–¥–µ–ª—å: EtherCAT –ø—Ä–æ—Ç–æ–∫–æ–ª
–§–∞–π–ª –ª–æ–≥–∞: $LogFile

=== –°–í–û–î–ö–ê ===
"@
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if ($logContent -match "States:\s+(\d+)") {
        $states = $matches[1]
        $report += "`n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: $states"
    }
    
    if ($logContent -match "Transitions:\s+(\d+)") {
        $transitions = $matches[1]
        $report += "`n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: $transitions"
    }
    
    if ($logContent -match "Memory usage:\s+([\d.]+)") {
        $memory = $memory
        $report += "`n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $memory MB"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    if ($logContent -match "error") {
        $report += "`n`n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò:"
        $errors = $logContent -split "`n" | Where-Object { $_ -match "error" }
        foreach ($error in $errors) {
            $report += "`n- $error"
        }
    } else {
        $report += "`n`n‚úÖ –û–®–ò–ë–û–ö –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if ($logContent -match "warning") {
        $report += "`n`n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:"
        $warnings = $logContent -split "`n" | Where-Object { $_ -match "warning" }
        foreach ($warning in $warnings) {
            $report += "`n- $warning"
        }
    }
    
    # –ê–Ω–∞–ª–∏–∑ LTL —Å–≤–æ–π—Å—Ç–≤
    $report += "`n`n=== –ê–ù–ê–õ–ò–ó LTL –°–í–û–ô–°–¢–í ==="
    
    $ltlProperties = @(
        "state_progression",
        "command_in_op_state", 
        "master_can_run",
        "slave_can_reach_op",
        "no_deadlock",
        "synchronization",
        "no_frame_loss",
        "command_processing"
    )
    
    foreach ($property in $ltlProperties) {
        if ($logContent -match $property) {
            $report += "`n‚úÖ $property - –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
        } else {
            $report += "`n‚ùì $property - —Å—Ç–∞—Ç—É—Å –Ω–µ—è—Å–µ–Ω"
        }
    }
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è EtherCAT
    $report += "`n`n=== –ê–ù–ê–õ–ò–ó ETHERCAT ==="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª–µ–π–≤–æ–≤
    if ($logContent -match "slave_states") {
        $report += "`n‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª–µ–π–≤–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if ($logContent -match "CMD_LRW|CMD_LRD|CMD_LWR") {
        $report += "`n‚úÖ –ö–æ–º–∞–Ω–¥—ã EtherCAT –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
    if ($logContent -match "network_ready") {
        $report += "`n‚úÖ –°–µ—Ç–µ–≤–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è"
    }
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    $report += "`n`n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ==="
    
    if ($logContent -match "error") {
        $report += "`n1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –º–æ–¥–µ–ª–∏"
        $report += "`n2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å LTL —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π"
        $report += "`n3. –£–ø—Ä–æ—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
    } else {
        $report += "`n1. –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –∞–Ω–∞–ª–∏–∑—É"
        $report += "`n2. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤"
        $report += "`n3. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–¥–µ–ª—å –≤ mCRL2 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    $report | Out-File -FilePath $ReportFile -Encoding UTF8
    Write-ColorOutput "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $ReportFile" "Green"
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    Write-ColorOutput "`nüìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:" "Yellow"
    if ($logContent -match "error") {
        Write-ColorOutput "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" "Red"
    } else {
        Write-ColorOutput "‚úÖ –ú–æ–¥–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ" "Green"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ EtherCAT –ø—Ä–æ—Ç–æ–∫–æ–ª–∞" "Magenta"
    Write-ColorOutput "=========================================" "Magenta"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if (-not (Test-Dependencies)) {
        Write-ColorOutput "‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã." "Red"
        exit 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
    if (-not (Test-ModelFile $ModelPath)) {
        Write-ColorOutput "‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã." "Red"
        exit 1
    }
    
    Write-ColorOutput "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" "Green"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º C –∫–æ–¥
    if (-not (Generate-Code $ModelPath $OutputDir)) {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ C –∫–æ–¥–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã." "Red"
        exit 1
    }
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–¥
    $cFile = Join-Path $OutputDir "ethercat.c"
    if (-not (Compile-Code $cFile $OutputDir)) {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã." "Red"
        exit 1
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    $exeFile = Join-Path $OutputDir "ethercat.exe"
    if (-not (Run-Verification $exeFile $OutputDir)) {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã." "Red"
        exit 1
    }
    
    Write-ColorOutput "`nüéâ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è EtherCAT –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" "Green"
    Write-ColorOutput "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $OutputDir" "Cyan"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if ($MyInvocation.InvocationName -ne '.') {
    Main
}


