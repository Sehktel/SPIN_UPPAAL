#!/usr/bin/env pwsh
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Spot (Library for œâ-Automata)
# Spot - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏ –ë—é—Ö–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π

param(
    [Parameter(Mandatory=$false)]
    [string]$ModelFile = "models/spot/traffic_light.py",
    
    [Parameter(Mandatory=$false)]
    [switch]$Help,
    
    [Parameter(Mandatory=$false)]
    [switch]$Verbose,
    
    [Parameter(Mandatory=$false)]
    [string]$OutputFile = "",
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("basic", "traffic_light", "advanced", "all")]
    [string]$DemoType = "all"
)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
function Show-Help {
    Write-Host @"
Spot Runner Script
==================

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    .\run_spot.ps1 [-ModelFile <–ø—É—Ç—å>] [-Help] [-Verbose] [-OutputFile <–ø—É—Ç—å>] [-DemoType <—Ç–∏–ø>]

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -ModelFile     –ü—É—Ç—å –∫ Python —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: models/spot/traffic_light.py)
    -Help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    -Verbose       –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    -OutputFile    –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    -DemoType      –¢–∏–ø –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: basic, traffic_light, advanced, all (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all)

–ü—Ä–∏–º–µ—Ä—ã:
    .\run_spot.ps1
    .\run_spot.ps1 -ModelFile "models/spot/advanced_automata.py"
    .\run_spot.ps1 -Verbose -DemoType "basic" -OutputFile "results/spot_output.txt"

Spot –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å œâ-–∞–≤—Ç–æ–º–∞—Ç–∞–º–∏
    - –ì–∏–±–∫–æ—Å—Ç—å –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
    - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    - Python –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"@
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Python
function Test-Python {
    try {
        $version = python --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úì Python –Ω–∞–π–¥–µ–Ω: $version" -ForegroundColor Green
            return $true
        }
    }
    catch {
        try {
            $version = python3 --version 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úì Python3 –Ω–∞–π–¥–µ–Ω: $version" -ForegroundColor Green
                return $true
            }
        }
        catch {
            Write-Host "‚úó Python –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH" -ForegroundColor Red
            Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python:" -ForegroundColor Yellow
            Write-Host "  winget install Python.Python.3.11" -ForegroundColor Cyan
            Write-Host "  –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Å: https://www.python.org/" -ForegroundColor Cyan
            return $false
        }
    }
    return $false
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Spot
function Test-Spot {
    try {
        $result = python -c "import spot; print(spot.version())" 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úì Spot –Ω–∞–π–¥–µ–Ω: –≤–µ—Ä—Å–∏—è $result" -ForegroundColor Green
            return $true
        }
    }
    catch {
        try {
            $result = python3 -c "import spot; print(spot.version())" 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úì Spot –Ω–∞–π–¥–µ–Ω (python3): –≤–µ—Ä—Å–∏—è $result" -ForegroundColor Green
                return $true
            }
        }
        catch {
            Write-Host "‚úó Spot –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
            Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Spot:" -ForegroundColor Yellow
            Write-Host "  pip install spot" -ForegroundColor Cyan
            Write-Host "  –∏–ª–∏ pip3 install spot" -ForegroundColor Cyan
            return $false
        }
    }
    return $false
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
function Test-ModelFile {
    param([string]$file)
    
    if (-not (Test-Path $file)) {
        Write-Host "‚úó –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $file" -ForegroundColor Red
        Write-Host "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:" -ForegroundColor Yellow
        Get-ChildItem "models/spot/" -Filter "*.py" | ForEach-Object {
            Write-Host "  - $($_.Name)" -ForegroundColor Cyan
        }
        return $false
    }
    
    Write-Host "‚úì –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω: $file" -ForegroundColor Green
    return $true
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã Python
function Get-PythonCommand {
    try {
        if (Get-Command "python" -ErrorAction SilentlyContinue) {
            return "python"
        } elseif (Get-Command "python3" -ErrorAction SilentlyContinue) {
            return "python3"
        } else {
            return "python"
        }
    }
    catch {
        return "python"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
function Invoke-SpotVerification {
    param(
        [string]$modelFile,
        [string]$demoType,
        [string]$outputFile = ""
    )
    
    Write-Host "`nüöÄ –ó–∞–ø—É—Å–∫ Spot –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏..." -ForegroundColor Magenta
    Write-Host "–ú–æ–¥–µ–ª—å: $modelFile" -ForegroundColor Cyan
    Write-Host "–¢–∏–ø –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: $demoType" -ForegroundColor Cyan
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    $command = Get-PythonCommand
    $args = @($modelFile)
    
    if ($Verbose) {
        Write-Host "–ö–æ–º–∞–Ω–¥–∞: $command $($args -join ' ')" -ForegroundColor Gray
    }
    
    # –ó–∞–ø—É—Å–∫ Spot
    try {
        if ($outputFile -and $outputFile -ne "") {
            Write-Host "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $outputFile" -ForegroundColor Yellow
            & $command @args | Tee-Object -FilePath $outputFile
        } else {
            & $command @args
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "`n‚úÖ Spot –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
        } else {
            Write-Host "`n‚ö†Ô∏è Spot –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: $LASTEXITCODE" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "`n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Spot: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function Analyze-SpotResults {
    param([string]$outputFile)
    
    if (-not (Test-Path $outputFile)) {
        Write-Host "–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞" -ForegroundColor Yellow
        return
    }
    
    Write-Host "`nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Spot..." -ForegroundColor Magenta
    
    $content = Get-Content $outputFile -Raw
    
    # –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if ($content -match "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ") {
        Write-Host "‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Spot –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
    }
    
    # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏
    if ($content -match "Spot –≤–µ—Ä—Å–∏—è: (.+)") {
        $version = $matches[1]
        Write-Host "üîß –í–µ—Ä—Å–∏—è Spot: $version" -ForegroundColor Cyan
    }
    
    # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞–≤—Ç–æ–º–∞—Ç–∞—Ö
    if ($content -match "(\d+) —Å–æ—Å—Ç–æ—è–Ω–∏–π") {
        $states = $matches[1]
        Write-Host "üìà –°–æ—Å—Ç–æ—è–Ω–∏–π –≤ –∞–≤—Ç–æ–º–∞—Ç–µ: $states" -ForegroundColor Cyan
    }
    
    # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º—É–ª–∞—Ö
    if ($content -match "–§–æ—Ä–º—É–ª–∞.*: (.+)") {
        $formula = $matches[1]
        Write-Host "üìù LTL —Ñ–æ—Ä–º—É–ª–∞: $formula" -ForegroundColor Cyan
    }
}

# –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
function Main {
    if ($Help) {
        Show-Help
        return
    }
    
    Write-Host "üîç Spot Library for œâ-Automata" -ForegroundColor Blue
    Write-Host "==============================" -ForegroundColor Blue
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if (-not (Test-Python)) {
        return
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Spot
    if (-not (Test-Spot)) {
        return
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
    if (-not (Test-ModelFile $ModelFile)) {
        return
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if ($OutputFile -and $OutputFile -ne "") {
        $outputDir = Split-Path $OutputFile -Parent
        if ($outputDir -and -not (Test-Path $outputDir)) {
            New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
        }
    }
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    Invoke-SpotVerification -modelFile $ModelFile -demoType $DemoType -outputFile $OutputFile
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if ($OutputFile -and $OutputFile -ne "") {
        Analyze-SpotResults -outputFile $OutputFile
    }
    
    Write-Host "`n‚ú® –ì–æ—Ç–æ–≤–æ!" -ForegroundColor Green
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
Main
